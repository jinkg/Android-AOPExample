/*
 * Copyright 2017 Yalin Jin
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import org.aspectj.bridge.IMessage
import org.aspectj.bridge.MessageHandler
import org.aspectj.tools.ajc.Main
import com.android.build.gradle.LibraryExtension
import com.android.build.gradle.AppExtension

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.3.0'
        classpath 'org.aspectj:aspectjtools:1.8.1'
    }
}

def aspectjEnable() {
    def var = hasProperty('ASPECTJ_ENABLE') ? ASPECTJ_ENABLE : false
    return Boolean.parseBoolean(var)
}

if (aspectjEnable()) {
    println(project.name)

    if (project.android instanceof LibraryExtension
            || project.android.getClass().getSuperclass().getSimpleName() == 'LibraryExtension') {
        println("compileLibrary.........")
        compileLibrary(project)
    } else if (project.project instanceof AppExtension
            || project.android.getClass().getSuperclass().getSimpleName() == 'AppExtension') {
        println("compileApplication.........")
        compileApplication(project)
    }
}

def static compileLibrary(Project project) {
    project.android.libraryVariants.all { variant ->
        JavaCompile javaCompile = variant.javaCompile
        aspectjCompile(project, javaCompile)
    }
}

def static compileApplication(Project project) {
    project.android.applicationVariants.all { variant ->
        JavaCompile javaCompile = variant.javaCompile
        aspectjCompile(project, javaCompile)
    }
}

def static aspectjCompile(Project project, JavaCompile javaCompile) {
    final def log = project.logger
    javaCompile.doLast {
        String[] args = ["-showWeaveInfo",
                         "-1.5",
                         "-inpath", javaCompile.destinationDir.toString(),
                         "-aspectpath", javaCompile.classpath.asPath,
                         "-d", javaCompile.destinationDir.toString(),
                         "-classpath", javaCompile.classpath.asPath,
                         "-bootclasspath", project.android.bootClasspath.join(File.pathSeparator)]

        log.debug "ajc args: " + Arrays.toString(args)

        MessageHandler handler = new MessageHandler(true);
        new Main().run(args, handler);
        for (IMessage message : handler.getMessages(null, true)) {
            switch (message.getKind()) {
                case IMessage.ABORT:
                case IMessage.ERROR:
                case IMessage.FAIL:
                    log.error message.message, message.thrown
                    break;
                case IMessage.WARNING:
                    log.warn message.message, message.thrown
                    break;
                case IMessage.INFO:
                    log.info message.message, message.thrown
                    break;
                case IMessage.DEBUG:
                    log.debug message.message, message.thrown
                    break;
            }
        }
    }
}